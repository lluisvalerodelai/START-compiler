#include "lexerpp.hpp"
#include <cstddef>
#include <cstdio>
#include <fstream>
#include <ios>
#include <iostream>
#include <string>
#include <vector>

// int - a - = - 3 - ;
// we have a baseASTnode class that whenever we point to a node we point to that
// children classes of baseASTnode: FunctionNode, StatementNode, ExpressionNode
// children classes of StatementNode (for now): varDecnAssign
// varDecnAssign: identifier name, identifier type, identifier value
// read token -int-, because so far we only have variable declarations and
// assignments, we know already that we need to add to the AST a Var_decNassign
// so we have main node, which has main.children[] -> a list of pointers to

class baseASTnode {
public:
  baseASTnode() {};
};

class FunctionNode : baseASTnode {

public:
  FunctionNode() { std::cout << "function node constructed \n"; }
};
class StatementNode : baseASTnode {

public:
  StatementNode() { std::cout << "statement node constructed \n"; }
};
class ExpressionNode : baseASTnode {

public:
  ExpressionNode() { std::cout << "expression node constructed \n"; }
};

class var_decNassign : StatementNode {
public:
  std::string identifier;
  std::string type;
  var_decNassign(std::string identifier_val, std::string identifier_type) {
    identifier = identifier_val;
    type = identifier_type;
  }
};

// return number of tokens generated by lexer()
int count_tokens(Token *tokens_list) {
  int count = 0;
  while (tokens_list[count].type != END) {
    count++;
  }
  return count;
}

int main(int argc, char *argv[]) {
  std::string file_name = argv[1];

  std::ifstream fileObject{file_name};

  std::vector<Token> tokens = lexer(fileObject);

  baseASTnode main;

  std::vector<baseASTnode *> pointervector;

  pointervector.push_back(&main);

  std::cout << &main << "\n";

  std::cout << pointervector.back() << "\n";

  return 0;
}
