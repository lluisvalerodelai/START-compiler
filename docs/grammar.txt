NOTE: just words like identifier, float, int when not surrounded by quotes are also treated as terminals, but they refer to the specific token type

<program>       ::= "int" "main" "(" ")" "{" <statements> "}"

<statements>    ::= <statement> {<statement>}

<statement>     ::= <declaration>
                    | <assignment>
                    | <if-statement>
                    | <while-statement>

<declaration>   ::= <type> <identifier> "=" <expression> ";"

<assignment>    ::= <identifier> "=" <expression> ";"

<if-statement>  ::= "if" "(" <expression> ")" "{" <statements> "}"

<while-statement>::= "while" "(" <expression> ")" "{" <statements> "}"


 -------------------expressions-------------------
 Precedence of operators:
  -logical or
  -logical and
  -logical not
  -multiplication or division 
  -addition or subtraction

<expression>          ::= <or_expression>
<or_expression>       ::= <and_expression> { "|" <and_expression> } 
<and_expression>      ::= <unary_expression> {"&" <unary_expression>} NOTE: unary expression here represents a unary operator on a standard expression, which includes the empty operator (do nothing)
<unary_expression>    ::= ["!"] <primary_expression>
<primary_expression>  ::= <factor> {"+" <factor> | "-" <factor>}
<factor>              ::= <term> { "*" <term> | "/" <term> }
<term>                ::= <numeric> | identifier | "(" <expression> ")"
<numeric>              ::= float | int

