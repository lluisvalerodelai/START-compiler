Full credit for the Start programming language belongs to Joost Broekens, Jonne Goedhart, and any other Leiden University employees who contributed. 
I had no part in the creation of this language, this compiler is a hobby project to learn more about languages. 

#Here we present the entire programming language "start", with annotated examples. This file can be used as a complete reference to its syntax and language concepts.
#Start is intended for use in CS first year eduction to learn programming and programming concepts.
#It focuses on easy to learn syntax, and, clear expression of programming concepts such as types, variables, combined types, strings,
#dealing with memory and assignment and simple algorithms. It is not intended to build large programs in.
#It comes with a Start to Python compiler, so that Start code can be run. You can pip install this (pip install start_compiler).

#Here we go!
##########################################################
#-------------Built in types: char, number, and string
##########################################################
#Start only has three built-in types: char, number, and string.
var c is char 	# To define a variable as a char (a single ascii character or 1 char), the reserved keyword 'is' is always used to denote the type of a variable, 'var' is used to denote the start of a variable definition.
var n is number	#'number' is also a built-in types
var s is string	# A variable defined as a string


############################################################
#-------------Variable assignment
############################################################
#An important part of programming is to work with variables. Variables are placeholders for values. Values reside in computer memory. A variable points (refers) to the memory object that contains the value.
#The identifier you use for the variable is the "name" you use to identify the pointer/reference and the type is needed to tell the programming language how to allocate memory to store the value.
#Now we cover the three variable assignment flavors there are.
#Assume we have two char variables:
var c1 is char
var c2 is char

# Let's assign a value to c1
c1 -> 'a' #c1 now refers to a memory object containing the value 'a'

#For assigning there are three operators; =, -> and :=. the semantics of these is as follows (example with variable of type char):

# Assignment by value
c2 = c1
#The = assignment operator copies the entire memory content of c1 to a new place in memory, and returns a reference, which is assigned to c2
#This means c2 = c1 will create a new char in memory, copies the value of c1 into it, and returns a reference so that c2 now refers to the new char. 
#c2 is a proper copy of c1, and changes to the one do not influence the other.

# Assignment by reference
c2 -> c1
# The reference c1 is directly assigned to c2, so no copy is made, but c2 and c1 now refer to the same location,
# They are different variables but effectively have the same content (not a copy)
# Changes to c1 will also induce the same changes in c2, and vice versa

# Assignment by copy (the odd one!)
c2 := c1
# Now the value of c1 is copied into the memory object of c2.
# So, this will effectively replace the value of c2 with a copy of the value of c1.
# If c2 had no value, it will now have a copy of the value of c1.
# The side effect of this is that if c2 was already assigned by reference to another variable say b0, this will also change the value of b0, as both refer to the same value

#We will use = as default assignment operator except when we need -> or :=, we do so because in most cases assignment by value will work, except when you need to manipulate the content of a memory object itself.


##########################################################
#-------------Lists as types
##########################################################
#As mentioned there are onyl three built-in types. We have to make all the rest we need.
#For example, a (very clumsy) list of 8 characters
type string8 contains start
	var c0 is char
	var c1 is char
	var c2 is char
	var c3 is char
	var c4 is char
	var c5 is char
	var c6 is char
	var c7 is char
end

var s1 is string8 #define a variable of the newly defined type
s1 = string8('j', 'o', 'n', 'n', 'e', '1', '2', '3') #create a new memory object containing 8 specific characters and assign a reference (to a copy of it) to variable s1
s1["c7"] = '4' #change member "c7" of variable s1 to a '4' (by assigning it a reference to a copy of '4')

# The start and end keywords are reserved keywords that indicate the start and end of a block of statements, in this case a block of definitions. This is the scope within which the statements are executed.
# But for a list, this is really unhandy from a syntax point of view, because it takes a lot of space and you cannot use a numerical index to address an element in the list, s8[7] would be handy.
# if you simply want to define a new type that contains a number of elements of a specific type you may use the following shorthand:

type string8short contains char[8]  # So the shorthand for a list with a given number of n elements is: type typename is sometype[n], generating a type composed of <n> members of type <sometype> accessible with []. 

var s2 is string8short
s2 = string8short('j', 'o', 'n', 'n', 'e', '1', '2', '3')
s2[7] = '4' #notice the numerical index here, which is handy if you want to "loop" through the list, i.e., address several elements in the list.

# If you want to define such a type (in which any of the members is of the same type) but you dont know how many members there will be upfront, this is the way:
type stringany contains char[*]

var s3 is stringany
s3 = stringany('j', 'o', 'n', 'n', 'e', '1', '2', '3')
s3[8] = 'z' # this is now possible, as the stringany type may conatin any number of elements, so we can simply add a new member '8' to it.

var s4 is string
s4 = string("jonne")
#s4[27] = '4'  #as string is a built-in, and atomic, type, it does not have "members", so this would generate a compile error.


##########################################################
#-------------Complex user-defined types
##########################################################
#We can define more complex types in exactly the same way
type coordinate contains start  #Another example of a new type now containing two numbers
	var x is number
	var y is number
end

type person contains start  #A complex type using what we defined above.
	var location is coordinate
	var name is string
end

#Two people defined as persons
var me is person
var you is person

type listOfPeople contains person[*]  # A list of persons in shorthand notation

#Example of a tree datastructure
type node contains start  		# The definition of the node
	var children is nodeList	# Recursive def use, so the children of a node are themselves nodes
	var name is string			# We can now conveniently define the name of the node as a string
end

type nodeList contains node[*]  # Shorthand for a variable length list of elements of type node.


############################################################
#-------------Constants
############################################################
#Start knows three constant types, because it only knows 3 built-in types: char, number and string.
c = 'A' #'A' tells start to create a char containing 'A' in memory, and then assigns a reference to (a copy of) the memory object to c (c was defined above already)
c = char('A') #This is what really happens above, use the "constructor" to create the instance and then have c point to the memory object created.
c = 65c #or use the ASCII character code (the code for capital 'A').
c = char(65c) #same again

n = 10 #creates a number and assigns the value 10 to the number n (n was defined above already)
n = number(-90003) #creates a number and assigns the value -90003 to the number n

s = string("Hello world") #same for a string (s was defined above already)
s = "Hello world!"


############################################################
#-------------Instantiating variables through constructors
############################################################
# Up until now we have used the = assignment operator all the time, but in fact this is pointless for all cases where you create a new instance of a type.
# If you look at the above examples in the Constancts sections, each assignment copies the enitred right-hand side, because we use the assignment by value operator. 
# This is handy if you need a new variable to contain the samen value as anold variable, but not if you simply need to create a new variable.
# This section is about creating new variables using their "constructor", which is a special function that always returns a reference to a newly created memory object of the given type.
# As such, when we use a constructor we will from now on only use the -> assignment, even though = will functionally do the same.
# To create an instance of a type (a new memory object), we tell the interpreter to reserve some memory and create a reference to it. This is what the constructor does.

# For example, to create a string, we can do this
s -> string("Hello") # creates a new string containing "Hello", and returns a refernece to it which is assigned to s (the variable s was defined all the way above)


var myPlace is coordinate
var yourPlace is coordinate

myPlace -> coordinate(0.5, 0.7)  # The coordinate constructor needs two numbers, one for each member, see the type definition above
yourPlace -> coordinate()  # This is allowed, Start will default to 0 for numbers, '' for chars and "" for strings
yourPlace -> coordinate(0, 0)  # This is the proper way to do it, though.

yourPlace["x"] -> 0.2  # This is how you assign a value to a member of coordinate variable <yourPlace>
yourPlace["y"] -> 0.4

me -> person(myPlace, string("Joost"))  # Instantiate a person and assign reference to me
you -> person(yourPlace, "You")  # Allowed as well as "You" is a shorthand for string("You")

var people is listOfPeople

people[0] -> me  # people[0] refers to me
people[1] -> you  # people[1] refers to you


############################################################
#-------------Functions
############################################################
#Now let's move to functions, a function is the third basic language component, next to variables (var) and types (type). A function resembles the constructor of a type, in that it also returns a pointer (reference) to an instance of a type (the return type)
#However, now you need to specify the "structure" of the function in detail. 
#The variables you define as arguments are seen as members of the function, just like the variables you define in a type are members of that type.
#The variables you define inside the function are lso seen as its members. There is no difference between these except that the arguments need to be used 
#when you use the function.
function concat is stringany contains start
    arguments start  # This block defines that the function concat takes in two arguments of the type char
        var c1 is char
        var c2 is char
    end
	
    var output is stringany #A newly defined local variable
    output = stringany(c1, c2)
    return output  # You must return something at the end of a function
end

var concatenated is stringany #we define the variable in which we want to store the result

c1 -> 'a'
c2 -> 'b'
concatenated -> concat(c1, c2)
#It is important to realize that arguments and return values are always passed by reference! So if you need a copy, you need to make it by using the = operator (which makes a copy)
#So in our case above, c1 and c2 both refer to the same 'place' in memory as 'a' and 'b' respectively, as do the arguments c1 and c2 after calling the function.
#As we use the constructor stringany() to create a new place, with members referring to the local variables c1 and c2, the resulting output and thus concatenated as well contains two members, both referring to the original memory objects 'a' and 'b'.
#If you now change c1 as follows (remember, this is an assignment by copy so 'x' is copied into the memory object to which c1 refers, then concatenated will also change:
c1 := 'x'
#If you dont want this to be possible, you need to somewhere use an explicit assignment by value. Otherwise everything is passed by references, also in constructors.
#For example in concat you could do output = stringany(c1, c2) instead.


############################################################
#-------------Built in functions.
############################################################
#Before we continue we need to explain several built-in functions.
#All numerical and logical operators are built-in functions in Start, just like the built-in functions len(x), print(x), print_raw(), input_number(), input_string(), input_char()
print(me)  # Prints the value of the variable as tree with [] (brackets)
print(you)  # 
print(people)  # Print as tree
print_raw(people) #prints the memory object's values only (a raw mem-dump)
print(len(me))  # len is a reserved function returning the number of elements (indexes) of a variable instance as a number, in this case 2 because people contains two members, [0] and [1]
print(len(c))  # In this case, again assuming b is var of type char, which has 1 members, len(b)=1
print(concatenated) #prints the memory object as a nested tree

var i is number # a new number
i -> 1
n -> 2
#These operators only work on numbers not on characters or strings
i -> +(i, 2)  	# Adds one to i and assigns the copy to i, so now i=3
i -> (-(i, 1))  # Subtracts 1 from i and assigns copy of the result to i, so i=2 again  # FIXED: extra parentheses are not a problem
i -> *(i, 5)  	# Multiplies i by two and assigns copy of the result to i, so i=10
i -> /(i, n)  	# Divides i by two and assigns copy of the result to im so i=5
i -> ^(i, 2)	# do i to the power of 2, resulting 25

print(string("i should be 25 now:"), i)
print(string("i not equal to 2, so ==(i,2) should be 0:"), ==(i, 2)) #checks if the value referred to by i equals the value referred to by 2, so value based comparison, result is a number (0, 1), same for >,<,>=,<=, ==
print(string("i not equal to 2, !(==(i,2)) should be 1:"), !(==(i, 2))) # so this is 1
i -> ===(me, people["0"])  #checks if me and you refer to the same memory location, i.e., if the pointers (references) are equals, and assigns the result (number 1 or 0) to i
print(i)

#You can do the same with infix notation, but keep in mind that operators are still functions so you need to use () around each operator.
i -> 1
i -> (i + 2)  
i -> (i - 1)  
i -> (i * 5)  
i -> (i / 2)  
i -> (i ^ 2)

print(string("i should be 25 now:"), i)
print(string("i not equal to 2, so (i == 2) should be 0: "), (i == 2))  # Mind the ()
print(string("i not equal to 2, !(==(i,2)) should be 1: "), !((i == 2))) # Infix, mind the ()

# append for strings
var string1 is string
var string2 is string

string1 -> string("hello")
string2 -> " world!"
print(++(string1, string2)) #++ is the string append function
print(("hello" ++ " world!"))

print(string("Input a string"))
s = input_string()#input_string is a reserved function that takes input in the string format only, it returns a string
print(s)

print(string("Input a char"))
c = input_char()#input_char is a reserved function that takes input in the char format only, it returns a char
print(c)

print(string("Input a number <10:"))
n -> input_number()#input_number is a reserved function that takes input in the number format only, it returns a number
print(n)


############################################################
#-------------Flow control (if and while).
############################################################
if (n > 5) start  #Simple if construction, again using start end block
	print(n, "is more than 5")
end

if ==(c, 'a') start #if then else construction
	print("You inputed an 'a'")
end else start
	print("You did not input a 'a'")
end

while >(n, 0) start #A while loop printing and counting down n, the only loop that exists in Start because you can make everything else
	print(n)
	n = (n - 1)
end

###############################
#-------------More complex user defined functions.
###############################
#Ok here is a less trivial function where two number lists are concatenated and returned as a new number list (copy)
type number_list contains number[*]

function append is number_list contains start
    arguments start
	    var s1 is number_list  # This is the first argument
	    var s2 is number_list
	end

	var temp is number_list
	var count is number

	count -> 0
	while (count < len(s1)) start
		temp[count] = s1[count]	# have the number at location temp[count] point to a copy of s1[count]
		count = (count + 1)		# increase count
	end
	while (count < (len(s1) + len(s2))) start  # add the second string
		temp[count] = s2[(count - len(s1))]  # continue at the length of s1 with setting chars of s2
		count = (count + 1)
	end

	return temp
end

# append two lists
var numbers_1 is number_list
var numbers_2 is number_list

numbers_1 -> number_list(1, 2, 3)
numbers_2 -> number_list(4, 5, 6)

print(numbers_2)
print(append(numbers_1, numbers_2))

#This concludes for now the Start syntax and language concept explanantion. Have fun playing around.



