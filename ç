#include "lexer.hpp"
#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>

/*
 *
 * Defined tokens:
 *  -separators: ( ) { } ; " "
 *  -operators: + - * / ! || &&
 *  -keywords: int, float, char, return, print, if, else, while, for
 *
 */

enum token_type {
  l_paren,
  r_paren,
  l_brace,
  r_brace,
  semicolon,
  quotes,
  add_op,
  minus_op,
  times_op,
  divide_op,
  or_op,
  and_op,
  int_keyword,
  float_keyword,
  char_keyword,
  return_keyword,
  print_keyword,
  if_keyword,
  else_keyword,
  while_keyword,
  for_keyword,
};

class token {
public:
  const int line_nr;
  const token_type type;

  token(int nr, token_type t) : line_nr(nr), type(t) {}

  ~token() = default;
};

class lexer {
public:
  mutable std::string file_string;
  mutable std::vector<token *> token_list;

  std::vector<token *> lex(std::string raw_input) {

    file_string = raw_input;
    std::vector<token *> tokens;

    return tokens;
  }

  ~lexer() = default;

private:
  char pop_string(std::string str) {
    if (str.length() == 0) {
      throw std::invalid_argument("String passed is of length 0");
    }

    char first_char = str[0];
    str.erase(0, 1);

    return first_char;
  }
};

int main(int argc, char **argv) {

  std::string example_string = "hello world";

  lexer lex;
  lex.file_string = example_string;

  std::vector<token *> tokens = lex.lex(example_string);

  std::cout << tokens[0]->type;

  return 0;
}
